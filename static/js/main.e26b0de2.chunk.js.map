{"version":3,"sources":["img/star_icon.png","components/Movie.js","components/Tvshow.js","routes/Home.js","routes/Mypage.js","routes/Search.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Movie","id","title","poster","rating","summary","genres","date","className","src","alt","slice","length","require","Tvshow","Home","state","m_isLoding","t_isLoding","movies","tvshows","getMovies","a","axios","get","results","data","setState","getTvshows","this","slick_settings","dots","infinite","speed","slidesToShow","slidesToScroll","autoplay","to","pathname","type","placeholder","maxLength","map","movie","key","release_date","overview","poster_path","genre_ids","vote_average","tvshow","name","first_air_date","React","Component","Mypage","Search","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e26b0de2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/star_icon.45dd5470.png\";","import React from 'react';   \r\nimport PropTypes from \"prop-types\";\r\nimport './reset.css';\r\nimport './Movie.css';\r\n\r\nfunction Movie({id, title, poster, summary, genres, date, rating}){\r\n    return (\r\n    <div className=\"movie\">\r\n        <img className=\"poster\" src={\"https://image.tmdb.org/t/p/w500\"+poster} alt={title} title={title} />\r\n        <div className=\"movie_data\">\r\n            <h3 className=\"movie_title\">{title.slice(0,15)}{(title.length>15)?\"...\":\"\"}</h3>\r\n            <div className=\"movie_rating\">\r\n                <img className=\"star_icon\" src={ require(\"../img/star_icon.png\") } alt=\"rating\"/>\r\n                <h5 className=\"rating_text\">{rating}</h5>\r\n            </div>\r\n            {/*<h5 className=\"movie_year\">{date}</h5>*/}\r\n            {/*<ul className=\"genres\">\r\n                {genres.map((genre, index) => (\r\n                <li key={index} className=\"genres_genre\">\r\n                    {genre}\r\n                </li>\r\n             ))}\r\n            </ul>*/}\r\n            {/* <p className=\"movie_summary\">{summary}</p> */}\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nMovie.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    date: PropTypes.string.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.arrayOf(PropTypes.number).isRequired,\r\n    rating: PropTypes.number.isRequired\r\n}\r\n\r\nexport default Movie;","import React from 'react';   \r\nimport PropTypes from \"prop-types\";\r\nimport './reset.css';\r\nimport './Tvshow.css';\r\n\r\nfunction Tvshow({id, title, poster, summary, genres, date, rating}){\r\n    return (\r\n    <div className=\"tvshow\">\r\n        <img className=\"poster\" src={\"https://image.tmdb.org/t/p/w500\"+poster} alt={title} title={title} />\r\n        <div className=\"tvshow_data\">\r\n            <h3 className=\"tvshow_title\">{title.slice(0,15)}{(title.length>15)?\"...\":\"\"}</h3>\r\n            <div className=\"tvshow_rating\">\r\n                <img className=\"star_icon\" src={ require(\"../img/star_icon.png\") } alt=\"rating\"/>\r\n                <h5 className=\"rating_text\">{rating}</h5>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nTvshow.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    date: PropTypes.string.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.arrayOf(PropTypes.number).isRequired,\r\n    rating: PropTypes.number.isRequired\r\n}\r\n\r\nexport default Tvshow;","import React from 'react';\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Movie from \"../components/Movie\";\r\nimport Tvshow from \"../components/Tvshow\";\r\nimport '../components/reset.css';\r\nimport './Home.css';\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport Slick from \"react-slick\";\r\n\r\nclass Home extends React.Component {\r\n    state = {\r\n        m_isLoding: true,\r\n        t_isLoding: true,\r\n        movies:[],\r\n        tvshows:[]\r\n    };\r\n\r\n    getMovies = async() => {\r\n        const {data: {results}} = await axios.get(\"https://api.themoviedb.org/3/movie/now_playing?api_key=9aa38313510a50c3ae30091b52efcc90&language=ko&page=1®ion=KR\");\r\n        this.setState({movies:results, m_isLoding: false});\r\n    };\r\n\r\n     getTvshows = async() => {\r\n         const {data: {results}} = await axios.get(\"https://api.themoviedb.org/3/tv/on_the_air?api_key=9aa38313510a50c3ae30091b52efcc90&language=ko&page=1\");\r\n         this.setState({tvshows:results, t_isLoding: false});\r\n     };\r\n\r\n    componentDidMount() {\r\n        this.getMovies();\r\n        this.getTvshows();\r\n    }\r\n    \r\n    render() {\r\n        const {m_isLoding, t_isLoding, movies, tvshows} = this.state;\r\n        const slick_settings = {\r\n            dots: true,\r\n            infinite: true,\r\n            speed: 500,\r\n            slidesToShow: 4,\r\n            slidesToScroll: 4,\r\n            autoplay: false,\r\n        }\r\n        return(\r\n            <section className=\"cont\">\r\n                {(m_isLoding&&t_isLoding)\r\n                 ? (<div className=\"loder\">\r\n                    {/* 로딩창 */}\r\n                     <span className=\"loder_text\">Lodding...</span>\r\n                    {/* //로딩창 */}\r\n                 </div>\r\n                 ):(\r\n                    <div className=\"Home\">\r\n                    <div id=\"wrap\">\r\n                      <header>\r\n                        <div className=\"header\">\r\n                        {/* 로그인 */}\r\n                            <div className=\"header_top\">\r\n                                <div className=\"container\">\r\n                                    <ul>\r\n                                        <li className=\"login\">Login</li>\r\n                                        <Link to={{\r\n                                            pathname: \"/Mypage\",\r\n                                            state: {\r\n\r\n                                            }\r\n                                        }}><li className=\"mypage\">Mypage</li>\r\n                                        </Link>\r\n                                    </ul>\r\n                                </div>\r\n                            </div>\r\n                        {/* //로그인 */}\r\n                        {/* 웹 이름 */}\r\n                            <div className=\"header_center\">\r\n                                <div className=\"container\">\r\n                                    <h1>Re-joy</h1>\r\n                                </div>\r\n                            </div>\r\n                        {/* //웹 이름 */}\r\n                        {/* 링크 */}\r\n                            <div className=\"linker\">\r\n                                <div className=\"container\">\r\n                                    {/* <ul>\r\n                                        <li><a href=\"https://www.netflix.com/browse\" target=\"_blank\">Netflix</a></li>\r\n                                        <li><a href=\"https://play.watcha.net/\" target=\"_blank\">Watcha</a></li>\r\n                                        <li><a href=\"https://www.wavve.com/\" target=\"_blank\">Wave</a></li>\r\n                                    </ul> */}\r\n                                </div>\r\n                            </div>\r\n                        {/* //링크 */}\r\n                        </div>\r\n                     </header>\r\n\r\n                     <nav>\r\n                        {/* 검색 */} \r\n                        <fieldset className=\"search\">\r\n                            <div className=\"container\">\r\n                                <legend className=\"ir_su\">search</legend>\r\n                                <form className=\"search_cont\">\r\n                                <input type=\"text\" id=\"input_search\" placeholder=\"search\" maxLength=\"50\"/>\r\n                                <button>\r\n                                    <span className=\"search_button\"></span>\r\n                                </button>\r\n                                </form>\r\n                            </div>\r\n                        </fieldset>\r\n                        {/* //검색 */}\r\n                        {/* 메뉴 */}\r\n                        <div className=\"menu\">\r\n                            <div className=\"container\">\r\n                                 <h2>menu</h2>\r\n                             </div>\r\n                         </div>\r\n                        {/* //메뉴 */}\r\n                     </nav>\r\n\r\n                     <div id=\"content\">\r\n                        {/* 추천 */}\r\n                        <div className=\"recommend\">\r\n                            <div className=\"container\">\r\n                                 <section>\r\n                                     <div>\r\n                                        <h3 className=\"ir_su\">recommend</h3>\r\n                                        <div className=\"movies\">\r\n                                            <h3 className=\"recommend_sort_title\">추천 영화</h3>\r\n                                            <Slick {...slick_settings}>\r\n                                                {movies.map(movie => (\r\n                                                    <Movie \r\n                                                        key={movie.id} \r\n                                                        id={movie.id} \r\n                                                        title={movie.title} \r\n                                                        date={movie.release_date} \r\n                                                        summary={movie.overview} \r\n                                                        poster={movie.poster_path}\r\n                                                        genres={movie.genre_ids}\r\n                                                        rating={movie.vote_average}\r\n                                                    />\r\n                                                ))} \r\n                                            </Slick>\r\n                                        </div>\r\n                                        <div className=\"tvshows\">\r\n                                            <h3 className=\"recommend_sort_title\">추천 티비쇼</h3>\r\n                                            <Slick {...slick_settings}>\r\n                                                {tvshows.map(tvshow => (\r\n                                                    <Tvshow \r\n                                                        key={tvshow.id}\r\n                                                        id={tvshow.id}\r\n                                                        title={tvshow.name}\r\n                                                        date={tvshow.first_air_date}\r\n                                                        summary={tvshow.overview}\r\n                                                        poster={tvshow.poster_path}\r\n                                                        genres={tvshow.genre_ids}\r\n                                                        rating={tvshow.vote_average}\r\n                                                    />\r\n                                                ))}\r\n                                            </Slick>\r\n                                        </div>\r\n                                    </div>\r\n                                 </section>\r\n                             </div>\r\n                        </div>\r\n                        {/* //추천 */}\r\n                        {/* 분류 */}\r\n                        <div className=\"category\">\r\n                             <div className=\"container\">\r\n                                 <section>\r\n                                     <h3>분류</h3>\r\n                                 </section>\r\n                             </div> \r\n                        </div>\r\n                        {/* //분류 */}\r\n                     </div>\r\n                     <footer>\r\n                        <div className=\"footer\">\r\n                            <div className=\"container\">\r\n                                 <h2>푸터</h2>\r\n                             </div>\r\n                         </div>\r\n                     </footer>\r\n                    </div>\r\n                 </div>                           \r\n                 )}                        \r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n\r\nfunction Mypage(){\r\n    return <span>this page is for Mypage</span>\r\n}\r\n\r\nexport default Mypage;","import React from 'react';\r\n\r\nfunction Search(){\r\n    return <span>this page is for Search</span>\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\nimport { HashRouter,Route } from \"react-router-dom\";\r\nimport Home from \"./routes/Home\";\r\nimport Mypage from \"./routes/Mypage\";\r\nimport Search from \"./routes/Search\";\r\n\r\nfunction App(){\r\n    return (\r\n        <HashRouter>\r\n            <Route path=\"/\" exact={true} component={Home} /> \r\n            <Route path=\"/Mypage\" component={Mypage} />\r\n            <Route path=\"/search\" component={Search} />\r\n        </HashRouter>\r\n        );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}