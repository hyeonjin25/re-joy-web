{"version":3,"sources":["img/star_icon.png","Movie.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Movie","year","title","poster","summary","rating","genres","className","src","alt","slice","length","require","App","state","isLoding","movies","getMovies","a","axios","get","data","setState","this","id","href","target","type","placeholder","map","movie","key","medium_cover_image","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6KAAAA,EAAOC,QAAU,IAA0B,uC,yMCsC5BC,MAjCf,YAA8D,EAA9CC,KAA+C,IAAzCC,EAAwC,EAAxCA,MAAgBC,GAAwB,EAAjCC,QAAiC,EAAxBD,QAAgBE,GAAQ,EAAhBC,OAAgB,EAARD,QAClD,OACA,yBAAKE,UAAU,SACX,yBAAKA,UAAU,SAASC,IAAKL,EAAQM,IAAKP,EAAOA,MAAOA,IACxD,yBAAKK,UAAU,cACX,wBAAIA,UAAU,eAAeL,EAAMQ,MAAM,EAAE,IAAMR,EAAMS,OAAO,GAAI,MAAM,IACxE,yBAAKJ,UAAU,gBACX,yBAAKA,UAAU,YAAYC,IAAMI,EAAQ,KAAyBH,IAAI,WACtE,wBAAIF,UAAU,eAAeF,OC2H9BQ,G,0NA/HXC,MAAQ,CACJC,UAAU,EACVC,OAAO,I,EAGXC,U,sBAAY,8BAAAC,EAAA,sEAC+BC,IAAMC,IAAI,gEADzC,gBACaJ,EADb,EACDK,KAAOA,KAAOL,OACrB,EAAKM,SAAS,CAACN,SAAQD,UAAU,IAFzB,2C,kEAMRQ,KAAKN,c,+BAGC,IAAD,EACsBM,KAAKT,MAAzBC,EADF,EACEA,SAAUC,EADZ,EACYA,OACjB,OACI,6BAAST,UAAU,QACdQ,EACG,yBAAKR,UAAU,SAEd,0BAAMA,UAAU,cAAhB,eAID,yBAAKA,UAAU,OACf,yBAAKiB,GAAG,QACN,gCACE,yBAAKjB,UAAU,UAEX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,aACX,4BACI,wBAAIA,UAAU,SAAQ,uBAAGkB,KAAK,KAAR,UACtB,wBAAIlB,UAAU,UAAS,uBAAGkB,KAAK,KAAR,cAMnC,yBAAKlB,UAAU,iBACX,yBAAKA,UAAU,aACX,4BAAI,uBAAGkB,KAAK,KAAR,aAKZ,yBAAKlB,UAAU,UACX,yBAAKA,UAAU,aACX,4BACI,4BAAI,uBAAGkB,KAAK,iCAAiCC,OAAO,UAAhD,YACJ,4BAAI,uBAAGD,KAAK,2BAA2BC,OAAO,UAA1C,WACJ,4BAAI,uBAAGD,KAAK,yBAAyBC,OAAO,UAAxC,cAQvB,6BAEG,yBAAKnB,UAAU,UACX,yBAAKA,UAAU,aACV,wBAAIA,UAAU,SAAd,UACA,yBAAKA,UAAU,eAAc,2CAAsB,2BAAOoB,KAAK,OAAOH,GAAG,eAAeI,YAAY,6CAK7G,yBAAKrB,UAAU,QACX,yBAAKA,UAAU,aACV,uCAMZ,yBAAKiB,GAAG,WAEL,yBAAKjB,UAAU,aACX,yBAAKA,UAAU,aACV,iCACG,wBAAIA,UAAU,SAAd,aACA,yBAAKA,UAAU,UACVS,EAAOa,KAAI,SAAAC,GAAK,OACb,kBAAC,EAAD,CACIC,IAAKD,EAAMN,GACXA,GAAIM,EAAMN,GACVvB,KAAM6B,EAAM7B,KACZC,MAAO4B,EAAM5B,MACbE,QAAS0B,EAAM1B,QACfD,OAAQ2B,EAAME,mBACd1B,OAAQwB,EAAMxB,OACdD,OAAQyB,EAAMzB,gBAStC,yBAAKE,UAAU,YACV,yBAAKA,UAAU,aACX,iCACI,gDAMhB,gCACG,yBAAKA,UAAU,UACX,yBAAKA,UAAU,aACV,sD,GApHf0B,IAAMC,YCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.2f2223a2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/star_icon.45dd5470.png\";","import React from 'react';   \r\nimport PropTypes from \"prop-types\"\r\nimport './reset.css';\r\nimport './Movie.css';\r\n\r\nfunction Movie({year, title, summary, poster, genres, rating}){\r\n    return (\r\n    <div className=\"movie\">\r\n        <img className=\"poster\" src={poster} alt={title} title={title} />\r\n        <div className=\"movie_data\">\r\n            <h3 className=\"movie_title\">{title.slice(0,25)}{(title.length>28)?\"...\":\"\"}</h3>\r\n            <div className=\"movie_rating\">\r\n                <img className=\"star_icon\" src={ require(\"./img/star_icon.png\") } alt=\"rating\"/>\r\n                <h5 className=\"rating_text\">{rating}</h5>\r\n            </div>\r\n            {/*<h5 className=\"movie_year\">{year}</h5>*/}\r\n            {/*<ul className=\"genres\">\r\n                {genres.map((genre, index) => (\r\n                <li key={index} className=\"genres_genre\">\r\n                    {genre}\r\n                </li>\r\n             ))}\r\n            </ul>*/}\r\n            {/*<p className=\"movie_summary\">{summary}</p>*/}\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nMovie.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    year: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired\r\n}\r\n\r\nexport default Movie;","import React from 'react';\r\nimport axios from \"axios\";\r\nimport Movie from \"./Movie\"\r\nimport './reset.css';\r\nimport './App.css';\r\nimport { render } from '@testing-library/react';\r\nimport { arrayOf } from 'prop-types';\r\n\r\nclass App extends React.Component {\r\n    state = {\r\n        isLoding: true,\r\n        movies:[]\r\n    };\r\n\r\n    getMovies = async() => {\r\n        const {data: {data: {movies}}} = await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=like_count\");\r\n        this.setState({movies, isLoding: false});\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.getMovies();\r\n    }\r\n    \r\n    render() {\r\n        const {isLoding, movies} = this.state;\r\n        return(\r\n            <section className=\"cont\">\r\n                {isLoding \r\n                 ? (<div className=\"loder\">\r\n                    {/* 로딩창 */}\r\n                     <span className=\"loder_text\">Lodding...</span>\r\n                    {/* //로딩창 */}\r\n                 </div>\r\n                 ):(\r\n                    <div className=\"App\">\r\n                    <div id=\"wrap\">\r\n                      <header>\r\n                        <div className=\"header\">\r\n                        {/* 로그인 */}\r\n                            <div className=\"header_top\">\r\n                                <div className=\"container\">\r\n                                    <ul>\r\n                                        <li className=\"login\"><a href=\"#\">Login</a></li>\r\n                                        <li className=\"mypage\"><a href=\"#\">Mypage</a></li>\r\n                                    </ul>\r\n                                </div>\r\n                            </div>\r\n                        {/* //로그인 */}\r\n                        {/* 웹 이름 */}\r\n                            <div className=\"header_center\">\r\n                                <div className=\"container\">\r\n                                    <h1><a href=\"#\">Re-joy</a></h1>\r\n                                </div>\r\n                            </div>\r\n                        {/* //웹 이름 */}\r\n                        {/* 링크 */}\r\n                            <div className=\"linker\">\r\n                                <div className=\"container\">\r\n                                    <ul>\r\n                                        <li><a href=\"https://www.netflix.com/browse\" target=\"_blank\">Netflix</a></li>\r\n                                        <li><a href=\"https://play.watcha.net/\" target=\"_blank\">Watcha</a></li>\r\n                                        <li><a href=\"https://www.wavve.com/\" target=\"_blank\">Wave</a></li>\r\n                                    </ul>\r\n                                </div>\r\n                            </div>\r\n                        {/* //링크 */}\r\n                        </div>\r\n                     </header>\r\n\r\n                     <nav>\r\n                        {/* 검색 */} \r\n                        <div className=\"search\">\r\n                            <div className=\"container\">\r\n                                 <h2 className=\"ir_su\">search</h2>\r\n                                 <div className=\"search_cont\"><span>search : </span><input type=\"text\" id=\"input_search\" placeholder=\"  Enter the content you want to find!\"/></div>\r\n                             </div>\r\n                        </div>\r\n                        {/* //검색 */}\r\n                        {/* 메뉴 */}\r\n                        <div className=\"menu\">\r\n                            <div className=\"container\">\r\n                                 <h2>menu</h2>\r\n                             </div>\r\n                         </div>\r\n                        {/* //메뉴 */}\r\n                     </nav>\r\n\r\n                     <div id=\"content\">\r\n                        {/* 추천 */}\r\n                        <div className=\"recommend\">\r\n                            <div className=\"container\">\r\n                                 <section>\r\n                                    <h3 className=\"ir_su\">recommend</h3>\r\n                                    <div className=\"movies\">\r\n                                        {movies.map(movie => (\r\n                                            <Movie \r\n                                                key={movie.id} \r\n                                                id={movie.id} \r\n                                                year={movie.year} \r\n                                                title={movie.title} \r\n                                                summary={movie.summary} \r\n                                                poster={movie.medium_cover_image}\r\n                                                genres={movie.genres}\r\n                                                rating={movie.rating}\r\n                                            />\r\n                                        ))}\r\n                                    </div>\r\n                                 </section>\r\n                             </div>\r\n                        </div>\r\n                        {/* //추천 */}\r\n                        {/* 분류 */}\r\n                        <div className=\"category\">\r\n                             <div className=\"container\">\r\n                                 <section>\r\n                                     <h3>분류</h3>\r\n                                 </section>\r\n                             </div> \r\n                        </div>\r\n                        {/* //분류 */}\r\n                     </div>\r\n                     <footer>\r\n                        <div className=\"footer\">\r\n                            <div className=\"container\">\r\n                                 <h2>푸터</h2>\r\n                             </div>\r\n                         </div>\r\n                     </footer>\r\n                    </div>\r\n                 </div>                           \r\n                 )}                        \r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}